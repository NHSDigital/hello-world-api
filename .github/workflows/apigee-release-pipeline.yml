name: apigee-release-pipeline
on:
  push
permissions: read-all

jobs:
  deploy-hello-world:
    runs-on: ubuntu-latest
    env:
      proxygen_private_key: ${{ secrets.ENCODED_HELLO_WORLD_PROXYGEN_PRIVATE_KEY }}
      proxygen_client_id: ${{ secrets.HELLO_WORLD_PROXYGEN_CLIENT_ID }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      
      - name: Get Pull Request Number
        id: pr
        if: github.ref != 'refs/heads/master'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "PR_NUMBER=$(gh pr view --json number -q .number || echo "")" >> $GITHUB_ENV

      - name: Install Python 3.8
        uses: actions/setup-python@v1
        with:
          python-version: 3.8
      
      - name: Update apt repositories
        run: sudo apt update
      
      - name: Install oathtool
        run: sudo apt-get install --yes oathtool

      - name: Upgrade python packaging tools
        run: python -m pip install --upgrade pip cryptography

      - name: Install poetry
        run: pip install poetry
      
      - name: Cache poetry packages
        uses: actions/cache@v1
        with:
          path: ~/.cache/pypoetry
          key: ${{ runner.os }}-build-cache-poetry-packages-${{ hashFiles('**/poetry.lock') }}

      - name: Install python depenancies 
        run: poetry install

      - name: Install python depenancies 
        run: |
          cd paas_client
          poetry install  

      - name: Authenticate with Proxygen
        run: |
          cd paas_client
          echo -n $proxygen_private_key | base64 --decode > proxygen_private_key.key
          PROXYGEN_TOKEN=$(poetry run python authenticate.py "proxygen_private_key.key" "$proxygen_client_id")
          echo "PROXYGEN_TOKEN=$PROXYGEN_TOKEN" >> $GITHUB_ENV
      
      - name: Get Apigee docker_token
        env:
          APIGEE_USERNAME: ${{ secrets.APIGEE_USERNAME_NONPROD }}
          APIGEE_PASSWORD: ${{ secrets.APIGEE_PASSWORD_NONPROD }}
          APIGEE_OTP_KEY: ${{ secrets.APIGEE_OTP_KEY_NONPROD }}
        run: |
          export MFA_CODE=`oathtool --totp -b "$APIGEE_OTP_KEY"`
          # basic auth value here is an apigee public value .. https://docs.apigee.com/api-platform/system-administration/management-api-tokens  (not secret) #
          curl -X POST https://login.apigee.com/oauth/token \
            -H "Content-Type: application/x-www-form-urlencoded" \
            -H "Accept: application/json;charset=utf-8" \
            -H "Authorization: Basic ZWRnZWNsaTplZGdlY2xpc2VjcmV0" \
            -d "username=${APIGEE_USERNAME}&password=${APIGEE_PASSWORD}&mfa_token=${MFA_CODE}&grant_type=password" | jq .access_token > .token
          # Remove quotes and set token into variable #
          token=$(cat .token)
          token="${token%\"}"
          token="${token#\"}"
          echo "APIGEE_ACCESS_TOKEN=$token" >> $GITHUB_ENV


      - name: Build and push Docker image
        working-directory: ./docker
        env:
          build_number: ${{github.run_number}}
        run: |
          # Login in to Hello World registry #
          docker_token=$(curl -H "Authorization: Bearer ${PROXYGEN_TOKEN}" https://proxygen.ptl.api.platform.nhs.uk/apis/hello-world/docker-token)
          docker_user=$(echo $docker_token | jq -r '.user')
          docker_password=$(echo $docker_token | jq -r '.password')
          docker_registry_url=$(echo $docker_token | jq -r '.registry')

          echo $docker_password | docker login -u ${docker_user} --password-stdin ${docker_registry_url}

          # Build and push image to registry #
          docker_registry=${docker_registry_url#"https://"} 
          echo "DOCKER_REGISTRY=$docker_registry" >> $GITHUB_ENV
          # Remove prefix #
          docker_tag="${build_number}-$(uuidgen)"
          echo "DOCKER_TAG=$docker_tag" >> $GITHUB_ENV
          docker_image="hello-world"

          docker build -t $docker_image:$docker_tag hello-world-sandbox
          docker tag $docker_image:$docker_tag $docker_registry/hello-world_hello-world:$docker_tag
          docker push $docker_registry/hello-world_hello-world:$docker_tag 

      - name: Deploy to Internal Dev Sandbox
        run: |
          export ENVIRONMENT="internal-dev-sandbox"
          source deploy-environment.sh
      
      - name: Run Internal Dev Sandbox tests
        run: |
          if [ -z "$PR_NUMBER" ]
          then
              instance="internal-dev-sandbox"
          else
              instance=internal-dev-sandbox-pr-$PR_NUMBER
          fi

          export INSTANCE=$instance
          export API_NAME="hello-world"

          poetry run pytest tests/api_tests.py
      
      - name: Deploy to Internal QA Sandbox
        run: |
          export ENVIRONMENT="internal-qa-sandbox"
          source deploy-environment.sh
      
      - name: Run Internal QA Sandbox tests
        run: |
          if [ -z "$PR_NUMBER" ]
          then
              instance="internal-qa-sandbox"
          else
              instance=internal-qa-sandbox-pr-$PR_NUMBER
          fi

          export INSTANCE=$instance
          export API_NAME="hello-world"

          poetry run pytest tests/api_tests.py
      
      - name: Deploy to Sandbox
        if: github.ref == 'refs/heads/master'
        run: |
          export ENVIRONMENT="sandbox"
          source deploy-environment.sh

      # TO DO - Run Sandbox smoke tests. Cannot use test-utils 2.0 currently
